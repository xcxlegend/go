// Code generated by protoc-gen-go.
// source: pvp.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PVPType int32

const (
	PVPType_None PVPType = 0
	PVPType_M1V1 PVPType = 100
	PVPType_M2V2 PVPType = 103
	PVPType_M3V3 PVPType = 104
	PVPType_M5V5 PVPType = 105
	PVPType_M1   PVPType = 1000
)

var PVPType_name = map[int32]string{
	0:    "None",
	100:  "M1V1",
	103:  "M2V2",
	104:  "M3V3",
	105:  "M5V5",
	1000: "M1",
}
var PVPType_value = map[string]int32{
	"None": 0,
	"M1V1": 100,
	"M2V2": 103,
	"M3V3": 104,
	"M5V5": 105,
	"M1":   1000,
}

func (x PVPType) Enum() *PVPType {
	p := new(PVPType)
	*p = x
	return p
}
func (x PVPType) String() string {
	return proto.EnumName(PVPType_name, int32(x))
}
func (x *PVPType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PVPType_value, data, "PVPType")
	if err != nil {
		return err
	}
	*x = PVPType(value)
	return nil
}
func (PVPType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type PVPNetType int32

const (
	PVPNetType_PVPNetTypeTcp PVPNetType = 1
	PVPNetType_PVPNetTypeUdp PVPNetType = 2
)

var PVPNetType_name = map[int32]string{
	1: "PVPNetTypeTcp",
	2: "PVPNetTypeUdp",
}
var PVPNetType_value = map[string]int32{
	"PVPNetTypeTcp": 1,
	"PVPNetTypeUdp": 2,
}

func (x PVPNetType) Enum() *PVPNetType {
	p := new(PVPNetType)
	*p = x
	return p
}
func (x PVPNetType) String() string {
	return proto.EnumName(PVPNetType_name, int32(x))
}
func (x *PVPNetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PVPNetType_value, data, "PVPNetType")
	if err != nil {
		return err
	}
	*x = PVPNetType(value)
	return nil
}
func (PVPNetType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

type PVPMatchState int32

const (
	PVPMatchState_Ready PVPMatchState = 1
	PVPMatchState_Done  PVPMatchState = 2
)

var PVPMatchState_name = map[int32]string{
	1: "Ready",
	2: "Done",
}
var PVPMatchState_value = map[string]int32{
	"Ready": 1,
	"Done":  2,
}

func (x PVPMatchState) Enum() *PVPMatchState {
	p := new(PVPMatchState)
	*p = x
	return p
}
func (x PVPMatchState) String() string {
	return proto.EnumName(PVPMatchState_name, int32(x))
}
func (x *PVPMatchState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PVPMatchState_value, data, "PVPMatchState")
	if err != nil {
		return err
	}
	*x = PVPMatchState(value)
	return nil
}
func (PVPMatchState) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

type PVPPlayer struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Level            *int32  `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	Skill            []int32 `protobuf:"varint,3,rep,name=skill" json:"skill,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PVPPlayer) Reset()                    { *m = PVPPlayer{} }
func (m *PVPPlayer) String() string            { return proto.CompactTextString(m) }
func (*PVPPlayer) ProtoMessage()               {}
func (*PVPPlayer) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *PVPPlayer) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PVPPlayer) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *PVPPlayer) GetSkill() []int32 {
	if m != nil {
		return m.Skill
	}
	return nil
}

type PVPMatchInfo struct {
	Gamer            *GamerMini   `protobuf:"bytes,1,opt,name=gamer" json:"gamer,omitempty"`
	Players          []*PVPPlayer `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
	PvpPos           *int32       `protobuf:"varint,3,opt,name=pvpPos" json:"pvpPos,omitempty"`
	Index            *int32       `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PVPMatchInfo) Reset()                    { *m = PVPMatchInfo{} }
func (m *PVPMatchInfo) String() string            { return proto.CompactTextString(m) }
func (*PVPMatchInfo) ProtoMessage()               {}
func (*PVPMatchInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *PVPMatchInfo) GetGamer() *GamerMini {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *PVPMatchInfo) GetPlayers() []*PVPPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *PVPMatchInfo) GetPvpPos() int32 {
	if m != nil && m.PvpPos != nil {
		return *m.PvpPos
	}
	return 0
}

func (m *PVPMatchInfo) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

type GamerStartPVPMatchC2S struct {
	Id               *int32       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PvpType          *PVPType     `protobuf:"varint,2,opt,name=pvpType,enum=PVPType" json:"pvpType,omitempty"`
	MapId            *int32       `protobuf:"varint,3,opt,name=mapId" json:"mapId,omitempty"`
	Players          []*PVPPlayer `protobuf:"bytes,4,rep,name=players" json:"players,omitempty"`
	Cancel           *bool        `protobuf:"varint,5,opt,name=cancel" json:"cancel,omitempty"`
	Session          *string      `protobuf:"bytes,6,opt,name=session" json:"session,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *GamerStartPVPMatchC2S) Reset()                    { *m = GamerStartPVPMatchC2S{} }
func (m *GamerStartPVPMatchC2S) String() string            { return proto.CompactTextString(m) }
func (*GamerStartPVPMatchC2S) ProtoMessage()               {}
func (*GamerStartPVPMatchC2S) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *GamerStartPVPMatchC2S) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GamerStartPVPMatchC2S) GetPvpType() PVPType {
	if m != nil && m.PvpType != nil {
		return *m.PvpType
	}
	return PVPType_None
}

func (m *GamerStartPVPMatchC2S) GetMapId() int32 {
	if m != nil && m.MapId != nil {
		return *m.MapId
	}
	return 0
}

func (m *GamerStartPVPMatchC2S) GetPlayers() []*PVPPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *GamerStartPVPMatchC2S) GetCancel() bool {
	if m != nil && m.Cancel != nil {
		return *m.Cancel
	}
	return false
}

func (m *GamerStartPVPMatchC2S) GetSession() string {
	if m != nil && m.Session != nil {
		return *m.Session
	}
	return ""
}

type GamerStartPVPMatchL2M struct {
	Id               *int32       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PvpType          *PVPType     `protobuf:"varint,2,opt,name=pvpType,enum=PVPType" json:"pvpType,omitempty"`
	MapId            *int32       `protobuf:"varint,3,opt,name=mapId" json:"mapId,omitempty"`
	Gamer            *GamerMini   `protobuf:"bytes,4,opt,name=gamer" json:"gamer,omitempty"`
	ServerId         *int32       `protobuf:"varint,5,opt,name=serverId" json:"serverId,omitempty"`
	Cancel           *bool        `protobuf:"varint,6,opt,name=cancel" json:"cancel,omitempty"`
	Players          []*PVPPlayer `protobuf:"bytes,7,rep,name=players" json:"players,omitempty"`
	Session          *string      `protobuf:"bytes,8,opt,name=session" json:"session,omitempty"`
	PvpElo           *int32       `protobuf:"varint,9,opt,name=pvpElo" json:"pvpElo,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *GamerStartPVPMatchL2M) Reset()                    { *m = GamerStartPVPMatchL2M{} }
func (m *GamerStartPVPMatchL2M) String() string            { return proto.CompactTextString(m) }
func (*GamerStartPVPMatchL2M) ProtoMessage()               {}
func (*GamerStartPVPMatchL2M) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *GamerStartPVPMatchL2M) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GamerStartPVPMatchL2M) GetPvpType() PVPType {
	if m != nil && m.PvpType != nil {
		return *m.PvpType
	}
	return PVPType_None
}

func (m *GamerStartPVPMatchL2M) GetMapId() int32 {
	if m != nil && m.MapId != nil {
		return *m.MapId
	}
	return 0
}

func (m *GamerStartPVPMatchL2M) GetGamer() *GamerMini {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *GamerStartPVPMatchL2M) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *GamerStartPVPMatchL2M) GetCancel() bool {
	if m != nil && m.Cancel != nil {
		return *m.Cancel
	}
	return false
}

func (m *GamerStartPVPMatchL2M) GetPlayers() []*PVPPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *GamerStartPVPMatchL2M) GetSession() string {
	if m != nil && m.Session != nil {
		return *m.Session
	}
	return ""
}

func (m *GamerStartPVPMatchL2M) GetPvpElo() int32 {
	if m != nil && m.PvpElo != nil {
		return *m.PvpElo
	}
	return 0
}

type NotifyGamerPVPMatch struct {
	Session *string         `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Match   []*PVPMatchInfo `protobuf:"bytes,2,rep,name=match" json:"match,omitempty"`
	Addr    *string         `protobuf:"bytes,3,opt,name=addr" json:"addr,omitempty"`
	PvpType *PVPType        `protobuf:"varint,4,opt,name=pvpType,enum=PVPType" json:"pvpType,omitempty"`
	MapId   *int32          `protobuf:"varint,5,opt,name=mapId" json:"mapId,omitempty"`
	State   *PVPMatchState  `protobuf:"varint,6,opt,name=state,enum=PVPMatchState" json:"state,omitempty"`
	// 服务器参数
	DeltaTime        *float32 `protobuf:"fixed32,106,opt,name=deltaTime" json:"deltaTime,omitempty"`
	InputDelta       *float32 `protobuf:"fixed32,107,opt,name=inputDelta" json:"inputDelta,omitempty"`
	ThreadRecv       *bool    `protobuf:"varint,108,opt,name=threadRecv" json:"threadRecv,omitempty"`
	MaxReSend        *int32   `protobuf:"varint,109,opt,name=maxReSend" json:"maxReSend,omitempty"`
	MinFrameTime     *int32   `protobuf:"varint,110,opt,name=minFrameTime" json:"minFrameTime,omitempty"`
	MatchTime        *int32   `protobuf:"varint,111,opt,name=matchTime" json:"matchTime,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *NotifyGamerPVPMatch) Reset()                    { *m = NotifyGamerPVPMatch{} }
func (m *NotifyGamerPVPMatch) String() string            { return proto.CompactTextString(m) }
func (*NotifyGamerPVPMatch) ProtoMessage()               {}
func (*NotifyGamerPVPMatch) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *NotifyGamerPVPMatch) GetSession() string {
	if m != nil && m.Session != nil {
		return *m.Session
	}
	return ""
}

func (m *NotifyGamerPVPMatch) GetMatch() []*PVPMatchInfo {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *NotifyGamerPVPMatch) GetAddr() string {
	if m != nil && m.Addr != nil {
		return *m.Addr
	}
	return ""
}

func (m *NotifyGamerPVPMatch) GetPvpType() PVPType {
	if m != nil && m.PvpType != nil {
		return *m.PvpType
	}
	return PVPType_None
}

func (m *NotifyGamerPVPMatch) GetMapId() int32 {
	if m != nil && m.MapId != nil {
		return *m.MapId
	}
	return 0
}

func (m *NotifyGamerPVPMatch) GetState() PVPMatchState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return PVPMatchState_Ready
}

func (m *NotifyGamerPVPMatch) GetDeltaTime() float32 {
	if m != nil && m.DeltaTime != nil {
		return *m.DeltaTime
	}
	return 0
}

func (m *NotifyGamerPVPMatch) GetInputDelta() float32 {
	if m != nil && m.InputDelta != nil {
		return *m.InputDelta
	}
	return 0
}

func (m *NotifyGamerPVPMatch) GetThreadRecv() bool {
	if m != nil && m.ThreadRecv != nil {
		return *m.ThreadRecv
	}
	return false
}

func (m *NotifyGamerPVPMatch) GetMaxReSend() int32 {
	if m != nil && m.MaxReSend != nil {
		return *m.MaxReSend
	}
	return 0
}

func (m *NotifyGamerPVPMatch) GetMinFrameTime() int32 {
	if m != nil && m.MinFrameTime != nil {
		return *m.MinFrameTime
	}
	return 0
}

func (m *NotifyGamerPVPMatch) GetMatchTime() int32 {
	if m != nil && m.MatchTime != nil {
		return *m.MatchTime
	}
	return 0
}

type GamerInputChangePlayer struct {
	Bef              *int32 `protobuf:"varint,1,opt,name=bef" json:"bef,omitempty"`
	Aft              *int32 `protobuf:"varint,2,opt,name=aft" json:"aft,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerInputChangePlayer) Reset()                    { *m = GamerInputChangePlayer{} }
func (m *GamerInputChangePlayer) String() string            { return proto.CompactTextString(m) }
func (*GamerInputChangePlayer) ProtoMessage()               {}
func (*GamerInputChangePlayer) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *GamerInputChangePlayer) GetBef() int32 {
	if m != nil && m.Bef != nil {
		return *m.Bef
	}
	return 0
}

func (m *GamerInputChangePlayer) GetAft() int32 {
	if m != nil && m.Aft != nil {
		return *m.Aft
	}
	return 0
}

type GamerInput struct {
	Id               *int32                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Yaw              *int32                  `protobuf:"varint,2,opt,name=yaw" json:"yaw,omitempty"`
	Btn              *uint32                 `protobuf:"varint,3,opt,name=btn" json:"btn,omitempty"`
	Pos              *int32                  `protobuf:"varint,4,opt,name=pos" json:"pos,omitempty"`
	ChangePlayer     *GamerInputChangePlayer `protobuf:"bytes,5,opt,name=changePlayer" json:"changePlayer,omitempty"`
	Talk             *int32                  `protobuf:"varint,6,opt,name=talk" json:"talk,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *GamerInput) Reset()                    { *m = GamerInput{} }
func (m *GamerInput) String() string            { return proto.CompactTextString(m) }
func (*GamerInput) ProtoMessage()               {}
func (*GamerInput) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *GamerInput) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GamerInput) GetYaw() int32 {
	if m != nil && m.Yaw != nil {
		return *m.Yaw
	}
	return 0
}

func (m *GamerInput) GetBtn() uint32 {
	if m != nil && m.Btn != nil {
		return *m.Btn
	}
	return 0
}

func (m *GamerInput) GetPos() int32 {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return 0
}

func (m *GamerInput) GetChangePlayer() *GamerInputChangePlayer {
	if m != nil {
		return m.ChangePlayer
	}
	return nil
}

func (m *GamerInput) GetTalk() int32 {
	if m != nil && m.Talk != nil {
		return *m.Talk
	}
	return 0
}

type GamerPVPResult struct {
	Keys             []string             `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	Values           []int32              `protobuf:"varint,2,rep,name=values" json:"values,omitempty"`
	Time             *int64               `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	Gone             []int32              `protobuf:"varint,4,rep,name=gone" json:"gone,omitempty"`
	Match            *NotifyGamerPVPMatch `protobuf:"bytes,101,opt,name=match" json:"match,omitempty"`
	Inputs           []*GamerInput        `protobuf:"bytes,102,rep,name=inputs" json:"inputs,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *GamerPVPResult) Reset()                    { *m = GamerPVPResult{} }
func (m *GamerPVPResult) String() string            { return proto.CompactTextString(m) }
func (*GamerPVPResult) ProtoMessage()               {}
func (*GamerPVPResult) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *GamerPVPResult) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *GamerPVPResult) GetValues() []int32 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *GamerPVPResult) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *GamerPVPResult) GetGone() []int32 {
	if m != nil {
		return m.Gone
	}
	return nil
}

func (m *GamerPVPResult) GetMatch() *NotifyGamerPVPMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *GamerPVPResult) GetInputs() []*GamerInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

type GamerPVPSyncC2S struct {
	Session          *string         `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Input            *GamerInput     `protobuf:"bytes,2,opt,name=input" json:"input,omitempty"`
	NeedFrames       []int32         `protobuf:"varint,3,rep,name=needFrames" json:"needFrames,omitempty"`
	Result           *GamerPVPResult `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	Crc              []uint64        `protobuf:"varint,5,rep,name=crc" json:"crc,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *GamerPVPSyncC2S) Reset()                    { *m = GamerPVPSyncC2S{} }
func (m *GamerPVPSyncC2S) String() string            { return proto.CompactTextString(m) }
func (*GamerPVPSyncC2S) ProtoMessage()               {}
func (*GamerPVPSyncC2S) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *GamerPVPSyncC2S) GetSession() string {
	if m != nil && m.Session != nil {
		return *m.Session
	}
	return ""
}

func (m *GamerPVPSyncC2S) GetInput() *GamerInput {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *GamerPVPSyncC2S) GetNeedFrames() []int32 {
	if m != nil {
		return m.NeedFrames
	}
	return nil
}

func (m *GamerPVPSyncC2S) GetResult() *GamerPVPResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GamerPVPSyncC2S) GetCrc() []uint64 {
	if m != nil {
		return m.Crc
	}
	return nil
}

func init() {
	proto.RegisterType((*PVPPlayer)(nil), "PVPPlayer")
	proto.RegisterType((*PVPMatchInfo)(nil), "PVPMatchInfo")
	proto.RegisterType((*GamerStartPVPMatchC2S)(nil), "GamerStartPVPMatchC2S")
	proto.RegisterType((*GamerStartPVPMatchL2M)(nil), "GamerStartPVPMatchL2M")
	proto.RegisterType((*NotifyGamerPVPMatch)(nil), "NotifyGamerPVPMatch")
	proto.RegisterType((*GamerInputChangePlayer)(nil), "GamerInputChangePlayer")
	proto.RegisterType((*GamerInput)(nil), "GamerInput")
	proto.RegisterType((*GamerPVPResult)(nil), "GamerPVPResult")
	proto.RegisterType((*GamerPVPSyncC2S)(nil), "GamerPVPSyncC2S")
	proto.RegisterEnum("PVPType", PVPType_name, PVPType_value)
	proto.RegisterEnum("PVPNetType", PVPNetType_name, PVPNetType_value)
	proto.RegisterEnum("PVPMatchState", PVPMatchState_name, PVPMatchState_value)
}

func init() { proto.RegisterFile("pvp.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcb, 0x6e, 0xf3, 0x54,
	0x10, 0xc6, 0xb7, 0x24, 0x9e, 0x5c, 0xea, 0x9a, 0x02, 0xa7, 0x2d, 0x08, 0x2b, 0xb0, 0x88, 0x2a,
	0x11, 0xa9, 0xae, 0xfa, 0x04, 0x2d, 0xa0, 0x48, 0xa4, 0xb2, 0x92, 0x92, 0xfd, 0xc1, 0x9e, 0x24,
	0x26, 0xf6, 0xb1, 0x65, 0x9f, 0x84, 0x46, 0x62, 0xc1, 0x1e, 0x56, 0x3c, 0x15, 0x8f, 0xc2, 0x63,
	0xfc, 0x3a, 0xe3, 0xb8, 0x75, 0xfe, 0xb6, 0x9b, 0x7f, 0x77, 0x66, 0xe2, 0x99, 0xf9, 0x2e, 0x33,
	0x01, 0x3b, 0xdf, 0xe5, 0xe3, 0xbc, 0xc8, 0x64, 0x76, 0xd1, 0x0b, 0xb3, 0x34, 0xcd, 0x44, 0x15,
	0x0d, 0x6f, 0xc1, 0x0e, 0x16, 0x41, 0x90, 0xf0, 0x3d, 0x16, 0x2e, 0x80, 0x1e, 0x47, 0x4c, 0xf3,
	0xb4, 0x91, 0xe5, 0xf6, 0xc1, 0x4a, 0x70, 0x87, 0x09, 0xd3, 0xeb, 0xb0, 0xdc, 0xc4, 0x49, 0xc2,
	0x0c, 0xcf, 0x18, 0x59, 0x43, 0x84, 0x5e, 0xb0, 0x08, 0xa6, 0x5c, 0x86, 0xeb, 0x89, 0x58, 0x66,
	0xee, 0x39, 0x58, 0x2b, 0x9e, 0x62, 0x41, 0xc5, 0x5d, 0x1f, 0xc6, 0x3f, 0xab, 0x68, 0x1a, 0x8b,
	0xd8, 0xbd, 0x84, 0x76, 0x4e, 0xed, 0x4b, 0xa6, 0x7b, 0x06, 0xfd, 0xf8, 0x32, 0x71, 0x00, 0xad,
	0x7c, 0x97, 0x07, 0x59, 0xc9, 0x8c, 0x7a, 0x4c, 0x2c, 0x22, 0x7c, 0x62, 0xa6, 0x0a, 0x87, 0x7f,
	0x6b, 0xf0, 0x05, 0x75, 0x9a, 0x4b, 0x5e, 0xc8, 0x7a, 0xe2, 0x9d, 0x3f, 0x3f, 0x82, 0x7a, 0x0e,
	0xed, 0x7c, 0x97, 0x3f, 0xee, 0x73, 0x24, 0xb0, 0x03, 0xbf, 0xa3, 0x26, 0xa8, 0x58, 0xf5, 0x4b,
	0x79, 0x3e, 0x89, 0x0e, 0xed, 0x1b, 0x58, 0xcc, 0xb7, 0xb0, 0x84, 0x5c, 0x84, 0x98, 0x30, 0xcb,
	0xd3, 0x46, 0x1d, 0xf7, 0x04, 0xda, 0x25, 0x96, 0x65, 0x9c, 0x09, 0xd6, 0xf2, 0xb4, 0x91, 0x3d,
	0xfc, 0xef, 0x4d, 0x34, 0xbf, 0xf8, 0xd3, 0x4f, 0x44, 0xf3, 0x2c, 0x9a, 0xf9, 0x4a, 0x34, 0x07,
	0x3a, 0x25, 0x16, 0x3b, 0x2c, 0x26, 0x11, 0xa1, 0xb1, 0x1a, 0xe8, 0x5a, 0x84, 0xae, 0x41, 0xa5,
	0xfd, 0x8a, 0x4a, 0x03, 0x7a, 0x47, 0x41, 0x3f, 0xe8, 0xfc, 0x63, 0x92, 0x31, 0x9b, 0x84, 0xfd,
	0x57, 0x87, 0xcf, 0x1f, 0x32, 0x19, 0x2f, 0xf7, 0x34, 0xb3, 0xe6, 0xd2, 0x2c, 0xd4, 0xa8, 0xf0,
	0x6b, 0x05, 0x59, 0x86, 0xeb, 0x83, 0x77, 0xfd, 0xf1, 0x91, 0xed, 0x3d, 0x30, 0x79, 0x14, 0x15,
	0xc4, 0xc7, 0x6e, 0x32, 0x37, 0xdf, 0x63, 0x5e, 0x91, 0xf9, 0x06, 0xac, 0x52, 0x72, 0x89, 0xc4,
	0x65, 0xe0, 0x0f, 0x9e, 0xbb, 0xce, 0x55, 0xd6, 0x3d, 0x05, 0x3b, 0xc2, 0x44, 0xf2, 0xc7, 0x38,
	0x45, 0xf6, 0xbb, 0xa7, 0x8d, 0x74, 0xd7, 0x05, 0x88, 0x45, 0xbe, 0x95, 0xf7, 0x2a, 0xcf, 0x36,
	0x75, 0x4e, 0xae, 0x0b, 0xe4, 0xd1, 0x0c, 0xc3, 0x1d, 0x4b, 0x48, 0x96, 0x53, 0xb0, 0x53, 0xfe,
	0x34, 0xc3, 0x39, 0x8a, 0x88, 0xa5, 0x34, 0xec, 0x0c, 0x7a, 0x69, 0x2c, 0x7e, 0x2a, 0x78, 0x8a,
	0xd4, 0x50, 0x50, 0x96, 0x3e, 0x94, 0xe1, 0x9a, 0x52, 0x19, 0x89, 0xe2, 0xc3, 0x97, 0xa4, 0xc6,
	0x44, 0x0d, 0xba, 0x5b, 0x73, 0xb1, 0xc2, 0x83, 0x9e, 0x5d, 0x30, 0x7e, 0xc3, 0xe5, 0xc1, 0xe0,
	0x2e, 0x18, 0x7c, 0x29, 0xab, 0xbb, 0x18, 0xfe, 0x09, 0xf0, 0x52, 0x73, 0xb4, 0x07, 0x5d, 0x30,
	0xf6, 0xfc, 0x8f, 0xc3, 0xf9, 0xa8, 0x06, 0x52, 0x90, 0x4e, 0x7d, 0x15, 0xe4, 0x59, 0x59, 0xad,
	0xb8, 0xfb, 0x03, 0xf4, 0xc2, 0xc6, 0x28, 0x12, 0xa8, 0xeb, 0x7f, 0x35, 0x7e, 0x07, 0x49, 0x0f,
	0x4c, 0xc9, 0x93, 0x0d, 0x09, 0x67, 0x0d, 0xff, 0xd1, 0x60, 0x50, 0x1b, 0x38, 0xc3, 0x72, 0x9b,
	0x48, 0xf5, 0xc1, 0x06, 0xf7, 0x25, 0xd3, 0x3c, 0xa3, 0xf2, 0x7d, 0xc7, 0x93, 0x2d, 0x56, 0xb7,
	0x67, 0x51, 0xb9, 0x22, 0xac, 0x80, 0x18, 0x2a, 0x5a, 0x65, 0x02, 0xe9, 0x16, 0x2c, 0xf7, 0xbb,
	0xda, 0x6a, 0x24, 0x08, 0x67, 0xe3, 0xb7, 0x16, 0xe4, 0x12, 0x5a, 0xe4, 0x43, 0xc9, 0x96, 0xb4,
	0x10, 0xdd, 0x06, 0xd0, 0xe1, 0x5f, 0x1a, 0x9c, 0xd4, 0x9f, 0xcf, 0xf7, 0x22, 0x54, 0x87, 0xfa,
	0x6a, 0xa3, 0x2e, 0xd4, 0x89, 0xe7, 0xdb, 0x4a, 0xc0, 0xe3, 0x06, 0xca, 0x51, 0x81, 0x18, 0x91,
	0x57, 0x65, 0xf5, 0x57, 0xe3, 0x7e, 0x0b, 0xad, 0x82, 0xa8, 0x1d, 0xce, 0xe4, 0x64, 0xfc, 0x11,
	0xe3, 0x2e, 0x18, 0x61, 0x11, 0x32, 0xcb, 0x33, 0x46, 0xe6, 0xd5, 0x3d, 0xb4, 0xeb, 0x9d, 0xeb,
	0x80, 0xf9, 0x90, 0x09, 0x74, 0x3e, 0x53, 0xaf, 0xe9, 0xf5, 0xe2, 0xda, 0x89, 0xe8, 0xe5, 0x2f,
	0x7c, 0x67, 0x45, 0xaf, 0x9b, 0xc5, 0x8d, 0xb3, 0xa6, 0xd7, 0xed, 0xe2, 0xd6, 0x89, 0xdd, 0x36,
	0xe8, 0xd3, 0x6b, 0xe7, 0xff, 0xf6, 0x95, 0x0f, 0x10, 0x2c, 0x82, 0x07, 0x94, 0xd4, 0xe8, 0x14,
	0xfa, 0x2f, 0xd1, 0x63, 0x98, 0x3b, 0xda, 0x71, 0xea, 0xd7, 0x28, 0x77, 0xf4, 0xab, 0xef, 0x29,
	0xd5, 0xd8, 0x62, 0x1b, 0xac, 0x19, 0xf2, 0x68, 0xef, 0x68, 0x6a, 0xc4, 0xbd, 0x82, 0xa2, 0x7f,
	0x08, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3f, 0x05, 0x36, 0x89, 0x05, 0x00, 0x00,
}
